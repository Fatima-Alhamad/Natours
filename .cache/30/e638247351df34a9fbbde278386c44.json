{"id":"../../node_modules/stripe/cjs/crypto/SubtleCryptoProvider.js","dependencies":[{"name":"C:\\Users\\Admin\\OneDrive\\Desktop\\NodeYT\\4-natours\\start\\starter\\package.json","includedInParent":true,"mtime":1728203676019},{"name":"C:\\Users\\Admin\\OneDrive\\Desktop\\NodeYT\\4-natours\\start\\starter\\node_modules\\stripe\\cjs\\package.json","includedInParent":true,"mtime":1728153801429},{"name":"./CryptoProvider.js","loc":{"line":4,"column":36,"index":152},"parent":"C:\\Users\\Admin\\OneDrive\\Desktop\\NodeYT\\4-natours\\start\\starter\\node_modules\\stripe\\cjs\\crypto\\SubtleCryptoProvider.js","resolved":"C:\\Users\\Admin\\OneDrive\\Desktop\\NodeYT\\4-natours\\start\\starter\\node_modules\\stripe\\cjs\\crypto\\CryptoProvider.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubtleCryptoProvider = void 0;\nconst CryptoProvider_js_1 = require(\"./CryptoProvider.js\");\n/**\n * `CryptoProvider which uses the SubtleCrypto interface of the Web Crypto API.\n *\n * This only supports asynchronous operations.\n */\nclass SubtleCryptoProvider extends CryptoProvider_js_1.CryptoProvider {\n    constructor(subtleCrypto) {\n        super();\n        // If no subtle crypto is interface, default to the global namespace. This\n        // is to allow custom interfaces (eg. using the Node webcrypto interface in\n        // tests).\n        this.subtleCrypto = subtleCrypto || crypto.subtle;\n    }\n    /** @override */\n    computeHMACSignature(payload, secret) {\n        throw new CryptoProvider_js_1.CryptoProviderOnlySupportsAsyncError('SubtleCryptoProvider cannot be used in a synchronous context.');\n    }\n    /** @override */\n    async computeHMACSignatureAsync(payload, secret) {\n        const encoder = new TextEncoder();\n        const key = await this.subtleCrypto.importKey('raw', encoder.encode(secret), {\n            name: 'HMAC',\n            hash: { name: 'SHA-256' },\n        }, false, ['sign']);\n        const signatureBuffer = await this.subtleCrypto.sign('hmac', key, encoder.encode(payload));\n        // crypto.subtle returns the signature in base64 format. This must be\n        // encoded in hex to match the CryptoProvider contract. We map each byte in\n        // the buffer to its corresponding hex octet and then combine into a string.\n        const signatureBytes = new Uint8Array(signatureBuffer);\n        const signatureHexCodes = new Array(signatureBytes.length);\n        for (let i = 0; i < signatureBytes.length; i++) {\n            signatureHexCodes[i] = byteHexMapping[signatureBytes[i]];\n        }\n        return signatureHexCodes.join('');\n    }\n    /** @override */\n    async computeSHA256Async(data) {\n        return new Uint8Array(await this.subtleCrypto.digest('SHA-256', data));\n    }\n}\nexports.SubtleCryptoProvider = SubtleCryptoProvider;\n// Cached mapping of byte to hex representation. We do this once to avoid re-\n// computing every time we need to convert the result of a signature to hex.\nconst byteHexMapping = new Array(256);\nfor (let i = 0; i < byteHexMapping.length; i++) {\n    byteHexMapping[i] = i.toString(16).padStart(2, '0');\n}\n"},"sourceMaps":null,"error":null,"hash":"f1be190cb713e973fb42bf95ecc46aac","cacheData":{"env":{}}}